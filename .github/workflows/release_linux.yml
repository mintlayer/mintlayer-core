name: Build Linux

on:
  workflow_call:
    inputs:
      binary_list:
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        arch: [aarch64, x86_64]
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Extract version from tag
      id: get_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        VERSION=${VERSION#v}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Version extracted: $VERSION"

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        targets: ${{ matrix.arch }}-unknown-linux-gnu

    - name: Install cross-compilation tools
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

    - name: Install dependencies
      run: |
        sudo apt-get install -y debhelper zip imagemagick
        if [ "${{ matrix.arch }}" = "x86_64" ]; then
          sudo apt-get install -y rpm
        fi

    - name: Build
      run: |
        cargo build --release --target ${{ matrix.arch }}-unknown-linux-gnu

    - name: Create Debian package for GUI
      run: |
        mkdir -p debian-gui/DEBIAN
        mkdir -p debian-gui/usr/bin
        mkdir -p debian-gui/usr/share/applications
        mkdir -p debian-gui/usr/share/icons/hicolor/512x512/apps
        mkdir -p debian-gui/usr/share/icons/hicolor/256x256/apps
        mkdir -p debian-gui/usr/share/icons/hicolor/128x128/apps
        mkdir -p debian-gui/usr/share/icons/hicolor/64x64/apps
        cp target/${{ matrix.arch }}-unknown-linux-gnu/release/node-gui debian-gui/usr/bin/mintlayer-node-gui

        # Copy and convert icon files
        cp build-tools/assets/node-gui-icon_512.png debian-gui/usr/share/icons/hicolor/512x512/apps/mintlayer-node-gui.png
        convert build-tools/assets/node-gui-icon_512.png -resize 256x256 debian-gui/usr/share/icons/hicolor/256x256/apps/mintlayer-node-gui.png
        convert build-tools/assets/node-gui-icon_512.png -resize 128x128 debian-gui/usr/share/icons/hicolor/128x128/apps/mintlayer-node-gui.png
        convert build-tools/assets/node-gui-icon_512.png -resize 64x64 debian-gui/usr/share/icons/hicolor/64x64/apps/mintlayer-node-gui.png

        # Create .desktop file
        cat << EOF > debian-gui/usr/share/applications/mintlayer-node-gui.desktop
        [Desktop Entry]
        Name=Mintlayer Node GUI
        Exec=/usr/bin/mintlayer-node-gui
        Icon=mintlayer-node-gui
        Type=Application
        Categories=Utility;Network;
        EOF

        cat << EOF > debian-gui/DEBIAN/control
        Package: mintlayer-node-gui
        Version: ${{ steps.get_version.outputs.VERSION }}
        Section: utils
        Priority: optional
        Architecture: ${{ matrix.arch == 'x86_64' && 'amd64' || 'arm64' }}
        Maintainer: Mintlayer <devs@mintlayer.org>
        Description: Mintlayer Node GUI
         A graphical user interface for the Mintlayer node.
        EOF
        dpkg-deb --build debian-gui
        mv debian-gui.deb Mintlayer_Node_GUI_linux_${{ steps.get_version.outputs.VERSION }}_${{ matrix.arch == 'x86_64' && 'amd64' || 'arm64' }}.deb

    - name: Create Debian package for Node (without GUI)
      run: |
        mkdir -p debian-node/DEBIAN
        mkdir -p debian-node/usr/bin
        IFS=',' read -ra BINARIES <<< "${{ inputs.binary_list }}"
        for binary in "${BINARIES[@]}"; do
          cp target/${{ matrix.arch }}-unknown-linux-gnu/release/$binary debian-node/usr/bin/mintlayer-$binary
        done
        cat << EOF > debian-node/DEBIAN/control
        Package: mintlayer-node
        Version: ${{ steps.get_version.outputs.VERSION }}
        Section: utils
        Priority: optional
        Architecture: ${{ matrix.arch == 'x86_64' && 'amd64' || 'arm64' }}
        Maintainer: Mintlayer <devs@mintlayer.org>
        Description: Mintlayer Node
         Mintlayer node and associated tools.
        EOF
        dpkg-deb --build debian-node
        mv debian-node.deb Mintlayer_Node_linux_${{ steps.get_version.outputs.VERSION }}_${{ matrix.arch == 'x86_64' && 'amd64' || 'arm64' }}.deb

    - name: Create RPM package for GUI
      if: matrix.arch == 'x86_64'
      run: |
        mkdir -p rpm-gui/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
        mkdir -p rpm-gui/BUILDROOT/mintlayer-node-gui-${{ steps.get_version.outputs.VERSION }}-1.x86_64
        cp -r debian-gui/usr rpm-gui/BUILDROOT/mintlayer-node-gui-${{ steps.get_version.outputs.VERSION }}-1.x86_64/

        cat << EOF > rpm-gui/SPECS/mintlayer-node-gui.spec
        Name: mintlayer-node-gui
        Version: ${{ steps.get_version.outputs.VERSION }}
        Release: 1
        Summary: Mintlayer Node GUI
        License: MIT
        BuildArch: x86_64

        %description
        A graphical user interface for the Mintlayer node.

        %files
        /usr/bin/mintlayer-node-gui
        /usr/share/applications/mintlayer-node-gui.desktop
        /usr/share/icons/hicolor/512x512/apps/mintlayer-node-gui.png
        /usr/share/icons/hicolor/256x256/apps/mintlayer-node-gui.png
        /usr/share/icons/hicolor/128x128/apps/mintlayer-node-gui.png
        /usr/share/icons/hicolor/64x64/apps/mintlayer-node-gui.png

        %changelog
        * $(date "+%a %b %d %Y") Mintlayer <devs@mintlayer.org> - ${{ steps.get_version.outputs.VERSION }}-1
        - Initial RPM release
        EOF

        rpmbuild -bb --define "_topdir $(pwd)/rpm-gui" --buildroot $(pwd)/rpm-gui/BUILDROOT/mintlayer-node-gui-${{ steps.get_version.outputs.VERSION }}-1.x86_64 rpm-gui/SPECS/mintlayer-node-gui.spec
        mv rpm-gui/RPMS/x86_64/mintlayer-node-gui-${{ steps.get_version.outputs.VERSION }}-1.x86_64.rpm Mintlayer_Node_GUI_linux_${{ steps.get_version.outputs.VERSION }}_x86_64.rpm

    - name: Create RPM package for Node (without GUI)
      if: matrix.arch == 'x86_64'
      run: |
        mkdir -p rpm-node/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
        mkdir -p rpm-node/BUILDROOT/mintlayer-node-${{ steps.get_version.outputs.VERSION }}-1.x86_64
        cp -r debian-node/usr rpm-node/BUILDROOT/mintlayer-node-${{ steps.get_version.outputs.VERSION }}-1.x86_64/

        cat << EOF > rpm-node/SPECS/mintlayer-node.spec
        Name: mintlayer-node
        Version: ${{ steps.get_version.outputs.VERSION }}
        Release: 1
        Summary: Mintlayer Node
        License: MIT
        BuildArch: x86_64

        %description
        Mintlayer node and associated tools.

        %files
        /usr/bin/*

        %changelog
        * $(date "+%a %b %d %Y") Mintlayer <devs@mintlayer.org> - ${{ steps.get_version.outputs.VERSION }}-1
        - Initial RPM release
        EOF

        rpmbuild -bb --define "_topdir $(pwd)/rpm-node" --buildroot $(pwd)/rpm-node/BUILDROOT/mintlayer-node-${{ steps.get_version.outputs.VERSION }}-1.x86_64 rpm-node/SPECS/mintlayer-node.spec
        mv rpm-node/RPMS/x86_64/mintlayer-node-${{ steps.get_version.outputs.VERSION }}-1.x86_64.rpm Mintlayer_Node_linux_${{ steps.get_version.outputs.VERSION }}_x86_64.rpm

    - name: Package Mintlayer Node (without GUI) as tar.gz
      run: |
        mkdir -p Mintlayer_Node_linux_${{ steps.get_version.outputs.VERSION }}_${{ matrix.arch }}
        IFS=',' read -ra BINARIES <<< "${{ inputs.binary_list }}"
        for binary in "${BINARIES[@]}"; do
          cp target/${{ matrix.arch }}-unknown-linux-gnu/release/$binary Mintlayer_Node_linux_${{ steps.get_version.outputs.VERSION }}_${{ matrix.arch }}/mintlayer-$binary
        done
        tar -czvf Mintlayer_Node_linux_${{ steps.get_version.outputs.VERSION }}_${{ matrix.arch }}.tar.gz Mintlayer_Node_linux_${{ steps.get_version.outputs.VERSION }}_${{ matrix.arch }}

    - name: Package Mintlayer Node GUI as tar.gz
      run: |
        mkdir -p Mintlayer_Node_GUI_linux_${{ steps.get_version.outputs.VERSION }}_${{ matrix.arch }}
        cp target/${{ matrix.arch }}-unknown-linux-gnu/release/node-gui Mintlayer_Node_linux_${{ steps.get_version.outputs.VERSION }}_${{ matrix.arch }}/mintlayer-node-gui
        tar -czvf Mintlayer_Node_GUI_linux_${{ steps.get_version.outputs.VERSION }}_${{ matrix.arch }}.tar.gz Mintlayer_Node_linux_${{ steps.get_version.outputs.VERSION }}_${{ matrix.arch }}

    - name: Upload GUI DEB Artifact
      uses: actions/upload-artifact@v4
      with:
        name: Mintlayer_Node_GUI_linux_${{ steps.get_version.outputs.VERSION }}_${{ matrix.arch }}_deb
        path: Mintlayer_Node_GUI_linux_${{ steps.get_version.outputs.VERSION }}_${{ matrix.arch == 'x86_64' && 'amd64' || 'arm64' }}.deb

    - name: Upload Node DEB Artifact (without GUI)
      uses: actions/upload-artifact@v4
      with:
        name: Mintlayer_Node_linux_${{ steps.get_version.outputs.VERSION }}_${{ matrix.arch }}_deb
        path: Mintlayer_Node_linux_${{ steps.get_version.outputs.VERSION }}_${{ matrix.arch == 'x86_64' && 'amd64' || 'arm64' }}.deb

    - name: Upload GUI RPM Artifact
      if: matrix.arch == 'x86_64'
      uses: actions/upload-artifact@v4
      with:
        name: Mintlayer_Node_GUI_linux_${{ steps.get_version.outputs.VERSION }}_x86_64_rpm
        path: Mintlayer_Node_GUI_linux_${{ steps.get_version.outputs.VERSION }}_x86_64.rpm

    - name: Upload Node RPM Artifact (without GUI)
      if: matrix.arch == 'x86_64'
      uses: actions/upload-artifact@v4
      with:
        name: Mintlayer_Node_linux_${{ steps.get_version.outputs.VERSION }}_x86_64_rpm
        path: Mintlayer_Node_linux_${{ steps.get_version.outputs.VERSION }}_x86_64.rpm

    - name: List tar.gz files
      run: |
        echo "Matching tar.gz files:"
        ls -l Mintlayer_Node_linux_*.tar.gz

    - name: Upload Node GUI tar.gz Artifact
      uses: actions/upload-artifact@v4
      continue-on-error: true
      with:
        name: Mintlayer_Node_GUI_linux_${{ steps.get_version.outputs.VERSION }}_${{ matrix.arch }}_tar.gz
        path: Mintlayer_Node_GUI_linux_*.tar.gz

    - name: Upload Node tar.gz Artifact (without GUI)
      uses: actions/upload-artifact@v4
      continue-on-error: true
      with:
        name: Mintlayer_Node_linux_${{ steps.get_version.outputs.VERSION }}_${{ matrix.arch }}_tar.gz
        path: Mintlayer_Node_linux_*.tar.gz
