name: macOS Build, Sign, and Release

on:
  push:
    tags:
      - '**[0-9]+.[0-9]+.[0-9]+*'
  pull_request:

jobs:
  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [aarch64, x86_64]
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Extract version from tag
      id: get_version
      run: |
        # Extract version from GITHUB_REF
        VERSION=${GITHUB_REF#refs/tags/}
        # Remove 'v' prefix if present
        VERSION=${VERSION#v}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Version extracted: $VERSION"

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        targets: ${{ matrix.arch }}-apple-darwin

    - name: Build
      run: |
        cargo build --release --bin node-gui --target ${{ matrix.arch }}-apple-darwin
  
    - name: Sign and Notarize
      env:
        MACOS_CERTIFICATE_BASE64: ${{ secrets.MACOS_CERTIFICATE }}
        MACOS_CERTIFICATE_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}
        MACOS_CERTIFICATE_NAME: ${{ secrets.MACOS_CERTIFICATE_NAME }}
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
        VERSION: ${{ steps.get_version.outputs.VERSION }}
      run: |
        ./build-tools/osx/sign_and_notarize.sh ${{ matrix.arch }} ${{ steps.get_version.outputs.VERSION }}

    - name: Upload DMG Artifact
      uses: actions/upload-artifact@v4
      with:
        name: Mintlayer_Node_GUI_${{ steps.get_version.outputs.VERSION }}_${{ matrix.arch }}
        path: Mintlayer_Node_GUI_${{ steps.get_version.outputs.VERSION }}_${{ matrix.arch }}.dmg

  create-release:
    needs: build-macos
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - uses: actions/checkout@v4
    
    - name: Extract version from tag
      id: get_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        VERSION=${VERSION#v}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

    - name: Download DMG Artifacts
      uses: actions/download-artifact@v4
      with:
        path: dmg-artifacts

    - name: Create Release
      uses: ncipollo/release-action@v1
      with:
        artifacts: "dmg-artifacts/**/*.dmg"
        artifactErrorsFailBuild: true
        name: "Release ${{ steps.get_version.outputs.VERSION }}"
        body: "Release version ${{ steps.get_version.outputs.VERSION }}"
        token: ${{ secrets.GITHUB_TOKEN }}