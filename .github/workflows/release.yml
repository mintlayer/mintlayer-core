name: macOS Build, Sign, and Notarize

on:
  push:
    tags:
      - '**[0-9]+.[0-9]+.[0-9]+*'
  pull_request:

jobs:
  build-macos:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        targets: aarch64-apple-darwin, x86_64-apple-darwin

    - name: Build Universal Binary
      if: false
      run: |
        cargo build --release --bin node-gui --target aarch64-apple-darwin
        cargo build --release --bin node-gui --target x86_64-apple-darwin
        lipo -create -output target/release/node-gui-universal \
          target/aarch64-apple-darwin/release/node-gui \
          target/x86_64-apple-darwin/release/node-gui

    - name: Create App Bundle
      run: |
        mkdir -p target/release/bundle/osx/Mintlayer\ Node\ GUI.app/Contents/{MacOS,Resources}
        # cp target/release/node-gui-universal target/release/bundle/osx/Mintlayer\ Node\ GUI.app/Contents/MacOS/node-gui
        cp /bin/bash target/release/bundle/osx/Mintlayer\ Node\ GUI.app/Contents/MacOS/node-gui
        cp logo.icns target/release/bundle/osx/Mintlayer\ Node\ GUI.app/Contents/Resources/
        VERSION=$(cargo metadata --format-version 1 | jq -r '.packages[] | select(.name == "node-gui") | .version')
        BUILD_NUMBER=$(date +%Y%m%d.%H%M%S)
        sed -e "s/VERSION_PLACEHOLDER/$VERSION/g" -e "s/BUILD_PLACEHOLDER/$BUILD_NUMBER/g" \
          build-tools/osx/Info.plist.template > target/release/bundle/osx/Mintlayer\ Node\ GUI.app/Contents/Info.plist

    - name: Install and Configure Certificates
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.MACOS_CERTIFICATE }}
        BUILD_CERTIFICATE_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
        echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
        
        # Debug: Check the file type and content
        echo "Debug: File type of the certificate:"
        file $CERTIFICATE_PATH

        echo "Debug: First few bytes of the certificate file (hexdump):"
        hexdump -C -n 32 $CERTIFICATE_PATH

        echo "Debug: Certificate file size:"
        ls -l $CERTIFICATE_PATH

        echo "Debug: Attempting to view certificate info:"
        openssl pkcs12 -info -in $CERTIFICATE_PATH -noout -nomacver -password pass:$BUILD_CERTIFICATE_PASSWORD

        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security import $CERTIFICATE_PATH -k $KEYCHAIN_PATH -P "$BUILD_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
        security list-keychains -d user -s $KEYCHAIN_PATH
        security default-keychain -s $KEYCHAIN_PATH
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

    - name: Sign Application
      env:
        CERTIFICATE_NAME: ${{ secrets.CERTIFICATE_NAME }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $RUNNER_TEMP/app-signing.keychain-db
        /usr/bin/codesign --force -s "$CERTIFICATE_NAME" --options runtime --timestamp target/release/bundle/osx/Mintlayer\ Node\ GUI.app -v

    - name: Create and Sign DMG
      env:
        CERTIFICATE_NAME: ${{ secrets.CERTIFICATE_NAME }}
      run: |
        brew install create-dmg
        create-dmg \
          --volname "Mintlayer Node GUI" \
          --window-pos 200 120 \
          --window-size 600 400 \
          --icon-size 100 \
          --icon "Mintlayer Node GUI.app" 175 120 \
          --hide-extension "Mintlayer Node GUI.app" \
          --app-drop-link 425 120 \
          "Mintlayer_Node_GUI.dmg" \
          "target/release/bundle/osx/"
        /usr/bin/codesign --force -s "$CERTIFICATE_NAME" --options runtime --timestamp Mintlayer_Node_GUI.dmg -v

    - name: Notarize DMG
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
      run: |
        # Submit for notarization
        NOTARIZATION_INFO=$(xcrun notarytool submit Mintlayer_Node_GUI.dmg --apple-id "$APPLE_ID" --team-id "$APPLE_TEAM_ID" --password "$APPLE_ID_PASSWORD" --wait --timeout 3600)
        echo "Notarization submission info: $NOTARIZATION_INFO"
        # Extract submission ID
        SUBMISSION_ID=$(echo "$NOTARIZATION_INFO" | awk '/id:/ {print $2; exit}')
        if [ -z "$SUBMISSION_ID" ]; then
          echo "Failed to extract submission ID. Notarization may have failed."
          exit 1
        fi
        echo "Notarization submission ID: $SUBMISSION_ID"
        # Check notarization status in a loop
        for i in {1..60}; do
          STATUS_INFO=$(xcrun notarytool info "$SUBMISSION_ID" --apple-id "$APPLE_ID" --team-id "$APPLE_TEAM_ID" --password "$APPLE_ID_PASSWORD")
          echo "Notarization status info: $STATUS_INFO"
          if echo "$STATUS_INFO" | grep -q "status: Accepted"; then
            echo "Notarization successful. Proceeding to staple."
            xcrun stapler staple Mintlayer_Node_GUI.dmg
            echo "Stapling complete."
            exit 0
          elif echo "$STATUS_INFO" | grep -q "status: Invalid"; then
            echo "Notarization failed. Check status info for details."
            exit 1
          else
            echo "Notarization still in progress. Waiting 60 seconds before checking again."
            sleep 60
          fi
        done
        echo "Notarization timed out after 60 attempts. Check status manually."
        exit 1
    - name: Verify Notarization
      run: spctl -a -vvv -t install Mintlayer_Node_GUI.dmg

    - name: Upload DMG Artifact
      uses: actions/upload-artifact@v4
      with:
        name: macos-universal-dmg-${{ github.run_id }}
        path: Mintlayer_Node_GUI.dmg

  create-release:
    needs: build-macos
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - uses: actions/checkout@v4
    - name: Download DMG Artifact
      uses: actions/download-artifact@v4
      with:
        name: macos-universal-dmg-${{ github.run_id }}
    - name: Create Release
      uses: ncipollo/release-action@v1
      with:
        artifacts: "Mintlayer_Node_GUI.dmg"
        token: ${{ secrets.GITHUB_TOKEN }}