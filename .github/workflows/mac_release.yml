name: macOS Build and Package

on:
  push:
    tags:
      - '**[0-9]+.[0-9]+.[0-9]+*'
  pull_request:


jobs:
  build:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Build Release
      run: cargo build --release

    - name: Install create-dmg
      run: brew install create-dmg

    - name: Create App Bundle
      run: |
        mkdir -p target/release/bundle/osx/Mintlayer\ Node\ GUI.app/Contents/MacOS
        mkdir -p target/release/bundle/osx/Mintlayer\ Node\ GUI.app/Contents/Resources
        cp target/release/node-gui target/release/bundle/osx/Mintlayer\ Node\ GUI.app/Contents/MacOS/
        cp logo.icns target/release/bundle/osx/Mintlayer\ Node\ GUI.app/Contents/Resources/

    - name: Generate Info.plist (macOS only)
      run: |
        VERSION=$(cargo metadata --format-version 1 | jq -r '.packages[] | select(.name == "node-gui") | .version')
        BUILD_NUMBER=$(date +%Y%m%d.%H%M%S)
        sed -e "s/VERSION_PLACEHOLDER/$VERSION/g" -e "s/BUILD_PLACEHOLDER/$BUILD_NUMBER/g" build-tools/osx/Info.plist.template > target/${{ matrix.target }}/release/bundle/osx/Mintlayer\ Node\ GUI.app/Contents/Info.plist
        
    - name: Debug Certificate Import
      env:
        MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
        MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        echo "Certificate length: ${#MACOS_CERTIFICATE}"
        echo "Certificate password length: ${#MACOS_CERTIFICATE_PWD}"
        echo "Keychain password length: ${#KEYCHAIN_PASSWORD}"
        
        # Decode certificate
        echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12
        echo "Certificate decoded. File size: $(wc -c < certificate.p12) bytes"
        
        # Create and configure keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
        
        # Set keychain settings
        security set-keychain-settings -t 3600 -l build.keychain
        
        # Import certificate
        if security import certificate.p12 -k build.keychain -P "$MACOS_CERTIFICATE_PWD" -T /usr/bin/codesign; then
          echo "Certificate imported successfully"
        else
          echo "Failed to import certificate. Error code: $?"
          security error $?
        fi
        
        # Set key partition list
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
        
        # List keychains and identities
        echo "Listing keychains:"
        security list-keychains
        echo "Listing identities:"
        security find-identity -v -p codesigning

    - name: Sign the Mac App
      env:
        CERTIFICATE_NAME: ${{ secrets.CERTIFICATE_NAME }}
      run: |
        echo "Certificate name: $CERTIFICATE_NAME"
        if [ -n "$CERTIFICATE_NAME" ]; then
          if /usr/bin/codesign --force -s "$CERTIFICATE_NAME" --options runtime target/release/bundle/osx/Mintlayer\ Node\ GUI.app -v; then
            echo "Codesigning successful"
          else
            echo "Codesigning failed. Error code: $?"
            codesign -vv -d target/release/bundle/osx/Mintlayer\ Node\ GUI.app
          fi
        else
          echo "CERTIFICATE_NAME is empty"
        fi

    - name: Code Sign
        env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
        run: |
          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
          security import certificate.p12 -k build.keychain -P "$MACOS_CERTIFICATE_PWD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
          /usr/bin/codesign --force -s "${{ secrets.CERTIFICATE_NAME }}" --options runtime target/release/bundle/osx/Mintlayer\ Node\ GUI.app -v

    - name: Create DMG
      run: |
        create-dmg \
          --volname "Mintlayer Node GUI" \
          --window-pos 200 120 \
          --window-size 600 400 \
          --icon-size 100 \
          --icon "Mintlayer Node GUI.app" 175 120 \
          --hide-extension "Mintlayer Node GUI.app" \
          --app-drop-link 425 120 \
          "Mintlayer_Node_GUI.dmg" \
          "target/release/bundle/osx/"

    - name: Upload DMG
      uses: actions/upload-artifact@v4
      with:
        name: Mintlayer_Node_GUI
        path: Mintlayer_Node_GUI.dmg