name: Build Windows

on:
  workflow_call:
    inputs:
      binary_list:
        required: true
        type: string

jobs:
  build:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Extract version from tag
      id: get_version
      run: |
        $VERSION = $env:GITHUB_REF -replace 'refs/tags/', '' -replace '^v', ''
        echo "VERSION=$VERSION" >> $env:GITHUB_OUTPUT
        echo "Version extracted: $VERSION"
      shell: pwsh

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable

    - name: Build
      run: cargo build --release

    - name: Package Mintlayer Node (without GUI)
      run: |
        $VERSION = "${{ steps.get_version.outputs.VERSION }}"
        $DEST = "Mintlayer_Node_${VERSION}_win64"
        New-Item -ItemType Directory -Path $DEST
        $env:BINARY_LIST -split ',' | ForEach-Object {
          Copy-Item "target\release\$_.exe" -Destination $DEST
        }
        Compress-Archive -Path $DEST -DestinationPath "${DEST}.zip"
      shell: pwsh

    - name: Package Mintlayer Node GUI
      run: |
        $VERSION = "${{ steps.get_version.outputs.VERSION }}"
        $DEST = "Mintlayer_Node_GUI_${VERSION}_win64"
        New-Item -ItemType Directory -Path $DEST
        Copy-Item "target\release\node-gui.exe" -Destination $DEST
        Compress-Archive -Path $DEST -DestinationPath "${DEST}.zip"
      shell: pwsh

    - name: Upload Node ZIP Artifact (without GUI)
      uses: actions/upload-artifact@v4
      with:
        name: Mintlayer_Node_${{ steps.get_version.outputs.VERSION }}_win64_zip
        path: Mintlayer_Node_${{ steps.get_version.outputs.VERSION }}_win64.zip

    - name: Upload GUI ZIP Artifact
      uses: actions/upload-artifact@v4
      with:
        name: Mintlayer_Node_GUI_${{ steps.get_version.outputs.VERSION }}_win64_zip
        path: Mintlayer_Node_GUI_${{ steps.get_version.outputs.VERSION }}_win64.zip