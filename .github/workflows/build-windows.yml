name: Test Windows Signing and Installer

on:
    workflow_call:
      inputs:
        binary_list:
          required: true
          type: string

jobs:
  test-signing:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4

    - name: Extract version for testing
      id: get_version
      run: |
        $VERSION = "0.0.1-test"  # Use a fixed version for testing
        echo "VERSION=$VERSION" >> $env:GITHUB_OUTPUT
        echo "Version for testing: $VERSION"
      shell: pwsh

    - name: Download dogecoind.exe
      run: |
        Invoke-WebRequest -Uri "https://docs.mintlayer.org/dogecoind.exe" -OutFile "dogecoind.exe"
      shell: pwsh

    - name: Install SignTool
      run: choco install windows-sdk-10-version-2004-all

    - name: Install OpenSSL
      run: choco install openssl
    
    - name: Prepare and Analyze Certificate
      run: |
        $cert_content = '${{ secrets.WINDOWS_PEM_CERT }}'
        $cert_content | Out-File -FilePath certificate.pem -Encoding ascii
        
        $has_private_key = $cert_content -match "BEGIN PRIVATE KEY"
        $has_certificate = $cert_content -match "BEGIN CERTIFICATE"
        
        Write-Host "Certificate file created. Size: $((Get-Item certificate.pem).Length) bytes"
        Write-Host "Contains private key: $has_private_key"
        Write-Host "Contains certificate: $has_certificate"
        
        if (-not $has_private_key) {
          Write-Host "WARNING: The certificate file does not contain a private key, which is required for code signing."
        }
        
        if (-not $has_certificate) {
          Write-Error "ERROR: The certificate file does not contain a certificate."
          exit 1
        }
        
        Write-Host "Certificate structure (redacted):"
        Get-Content certificate.pem | ForEach-Object { $_ -replace '.', '*' }
      shell: pwsh

    - name: Attempt PFX Conversion
      run: |
        $pfxPassword = [System.Guid]::NewGuid().ToString("N")
        $result = openssl pkcs12 -export -out certificate.pfx -inkey certificate.pem -in certificate.pem -passout pass:$pfxPassword 2>&1
        if ($LASTEXITCODE -ne 0) {
          Write-Host "OpenSSL Error: $result"
          Write-Host "Unable to create PFX. This might be due to missing private key or invalid certificate format."
          exit 1
        }
        echo "PFX_PASSWORD=$pfxPassword" >> $env:GITHUB_ENV
      shell: pwsh

    - name: Sign dogecoind.exe
      run: |
        & "C:\Program Files (x86)\Windows Kits\10\bin\10.0.19041.0\x64\signtool.exe" sign /v /f certificate.pfx /p "$env:PFX_PASSWORD" /tr http://timestamp.digicert.com /td sha256 /fd sha256 "dogecoind.exe"
      shell: pwsh

    - name: Package Signed dogecoind
      run: |
        $VERSION = "${{ steps.get_version.outputs.VERSION }}"
        $DEST = "Signed_dogecoind_${VERSION}_win64"
        New-Item -ItemType Directory -Path $DEST
        Copy-Item "dogecoind.exe" -Destination $DEST
        Compress-Archive -Path $DEST -DestinationPath "${DEST}.zip"
      shell: pwsh

    - name: Install NSIS
      run: |
        choco install nsis -y
        echo "C:\Program Files (x86)\NSIS" >> $env:GITHUB_PATH
      shell: pwsh

    - name: Create NSIS Installer Script
      run: |
        $VERSION = "${{ steps.get_version.outputs.VERSION }}"
        $NSIS_SCRIPT = @"
        !include "MUI2.nsh"
        Name "Signed Dogecoind (Test)"
        OutFile "Signed_Dogecoind_${VERSION}_Setup.exe"
        InstallDir "$PROGRAMFILES64\Signed Dogecoind Test"
        !insertmacro MUI_PAGE_DIRECTORY
        !insertmacro MUI_PAGE_INSTFILES
        !insertmacro MUI_LANGUAGE "English"
        Section "Install"
          SetOutPath "$INSTDIR"
          File "dogecoind.exe"
          CreateShortCut "$DESKTOP\Signed Dogecoind Test.lnk" "$INSTDIR\dogecoind.exe"
          WriteUninstaller "$INSTDIR\uninstall.exe"
        SectionEnd
        Section "Uninstall"
          Delete "$INSTDIR\dogecoind.exe"
          Delete "$INSTDIR\uninstall.exe"
          Delete "$DESKTOP\Signed Dogecoind Test.lnk"
          RMDir "$INSTDIR"
        SectionEnd
        "@
        $NSIS_SCRIPT | Out-File -FilePath "installer.nsi" -Encoding utf8
      shell: pwsh

    - name: Build NSIS Installer
      run: makensis installer.nsi

    - name: Sign Installer
      run: |
        & "C:\Program Files (x86)\Windows Kits\10\bin\10.0.19041.0\x64\signtool.exe" sign /v /f certificate.pfx /p "$env:PFX_PASSWORD" /tr http://timestamp.digicert.com /td sha256 /fd sha256 "Signed_Dogecoind_${{ steps.get_version.outputs.VERSION }}_Setup.exe"
      shell: pwsh

    - name: Upload Test Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Test_Artifacts
        path: |
          Signed_dogecoind_${{ steps.get_version.outputs.VERSION }}_win64.zip
          Signed_Dogecoind_${{ steps.get_version.outputs.VERSION }}_Setup.exe

    - name: Clean up Certificate Files
      if: always()
      run: |
        Remove-Item -ErrorAction Ignore certificate.pem, certificate.pfx, dogecoind.exe
      shell: pwsh