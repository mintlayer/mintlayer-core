[package]
name = "mintlayer-core"
description = "Bitcoin bridging blockchain node"
homepage = "https://mintlayer.org"
repository = "https://github.com/mintlayer/mintlayer-core"
readme = "README.md"
license = "MIT"
version = "0.5.1"
authors = [
  "Samer Afach <samer.afach@mintlayer.org>",
  "Ben Marsh <benjamin.marsh@mintlayer.org>",
  "Enrico Rubboli <enrico.rubboli@mintlayer.org>",
]
edition = "2021"

[workspace]
members = [
  "accounting",                          # Accounting and balances abstractions.
  "api-server/api-server-common",        # API server, for light-wallets and block explorers: common between web-server and scanner.
  "api-server/storage-test-suite",       # Test suite for the abstract storage layer of the API server to ensure consistent behavior.
  "api-server/scanner-daemon",           # API server, for light-wallets and block explorers: blockchain scanner daemon.
  "api-server/scanner-lib",              # API server, for light-wallets and block explorers: blockchain scanner library.
  "api-server/stack-test-suite",         # API server, for light-wallets and block explorers: testing the scanner and web-server.
  "api-server/web-server",               # API server, for light-wallets and block explorers: web-server.
  "blockprod",                           # Block production with whatever consensus algorithm.
  "chainstate",                          # Code on chainstate of blocks and transactions.
  "chainstate/test-suite",               # Tests for the chainstate, separated to make use of the chainstate test framework.
  "common",                              # Everything else, until it's moved to another crate.
  "consensus",                           # Consensus related logic.
  "crypto",                              # Cryptographic primitives and their interfaces.
  "dns-server",                          # DNS-server.
  "logging",                             # Logging engine and its interfaces.
  "mempool",                             # Mempool interface and implementation.
  "mempool/types",                       # Common mempool types.
  "mintscript",                          # Basic scripting language for validating transactions.
  "mocks",                               # Mock implementations of our traits (used for testing).
  "node-daemon",                         # Node terminal binary.
  "networking",                          # Pure networking implementations
  "node-gui",                            # Node GUI binary.
  "node-lib",                            # Node lib; the common library between daemon, tui and gui node executables.
  "orders-accounting",                   # Orders accounting
  "p2p",                                 # P2p communication interfaces and protocols.
  "p2p/backend-test-suite",              # P2p backend agnostic tests.
  "p2p/types",                           # P2p support types with minimal dependencies.
  "pos-accounting",                      # PoS accounting and balances abstractions.
  "randomness",                          # A wrapper around all randomness functionality to make audits easier
  "rpc",                                 # Rpc abstraction and implementation.
  "rpc/description",                     # Data types describing an RPC interface.
  "rpc/description-macro",               # Macro to generate rpc interface description.
  "rpc/types",                           # Support types for use in RPC interfaces.
  "script",                              # Bitcoin script and its interfaces.
  "serialization",                       # Full featured serialization interfaces and implementations.
  "serialization/core",                  # Serialization core tools.
  "serialization/tagged",                # Serialization for direct/tagged encoding style.
  "serialization/tagged/derive",         # direct/tagged encoding style derive macros.
  "storage",                             # storage abstraction layer and its implementation.
  "storage/backend-test-suite",          # Tests for validating storage backend implementations.
  "storage/core",                        # Core backend-agnostic storage abstraction.
  "storage/failing",                     # Storage adapter to occasionally fail certain operations, for testing.
  "storage/inmemory",                    # In-memory storage backend implementation.
  "storage/lmdb",                        # LMDB-based persistent storage backend implementation.
  "storage/sqlite",                      # SQLite-based persistent storage backend implementation.
  "subsystem",                           # Utilities for working with concurrent subsystems.
  "test",                                # Integration tests.
  "test-rpc-functions",                  # RPC functions specifically for tests.
  "test-utils",                          # Various utilities for tests.
  "tokens-accounting",                   # Tokens accounting
  "utils",                               # Various utilities.
  "utils/networking",                    # Various async/tokio utilities.
  "utxo",                                # Utxo and related utilities (cache, undo, etc.).
  "wallet",                              # Wallet primitives.
  "wallet/wallet-cli",                   # Wallet CLI/REPL binary.
  "wallet/wallet-cli-lib",               # Wallet CLI/REPL lib.
  "wallet/wallet-cli-commands",          # Wallet CLI/REPL commands.
  "wallet/wallet-controller",            # Common code for wallet UI applications.
  "wallet/wallet-node-client",           # Wallet-to-node communication tools.
  "wallet/wallet-address-generator",     # Wallet address generator binary.
  "wallet/wallet-address-generator-lib", # Wallet address generator lib.
  "wallet/wallet-rpc-client",            # Wallet RPC communication.
  "wallet/wallet-rpc-daemon",            # Wallet RPC daemon binary.
  "wallet/wallet-rpc-lib",               # Wallet RPC definitions library.
  "wallet/wallet-test-node",             # Node for wallet testing as a library.
  "wasm-wrappers",                       # WASM wrappers for various components.
  "wasm-wrappers/wasm-doc-gen",          # WASM wrappers documentation generator.
]

default-members = [
  "api-server/scanner-daemon",
  "api-server/web-server",
  "chainstate",
  "common",
  "crypto",
  "dns-server",
  "logging",
  "mempool",
  "networking",
  "node-daemon",
  "node-gui",
  "node-lib",
  "p2p",
  "rpc",
  "script",
  "serialization",
  "storage",
  "subsystem",
  "utils",
  "utxo",
  "wallet",
  "wallet/wallet-cli",
  "wallet/wallet-address-generator",
  "wallet/wallet-rpc-daemon",
]

[dependencies]
chainstate = { path = "chainstate" }
chainstate-storage = { path = "chainstate/storage" }
chainstate-types = { path = "chainstate/types" }
common = { path = "common" }
crypto = { path = "crypto" }
logging = { path = "logging" }
mempool = { path = "mempool" }
p2p = { path = "p2p" }
rpc = { path = "rpc" }
script = { path = "script" }
serialization = { path = "serialization" }
storage = { path = "storage" }
utxo = { path = "utxo" }

[workspace.package]
edition = "2021"
rust-version = "1.80"
version = "0.5.1"
license = "MIT"

[workspace.dependencies]
addr = "0.15"
anyhow = "1.0"
arraytools = "0.1"
assert_cmd = "2.0"
async-trait = "0.1"
atomic-traits = "0.4"
axum = "0.7"
base64 = "0.22"
bech32 = "0.11"
bip39 = { version = "2.0", default-features = false }
bitcoin-bech32 = "0.13"
blake2 = "0.10"
bytes = "1.1"
byte-unit = "5.1"
cfg-if = "1.0"
chacha20poly1305 = "0.10"
chrono = "0.4"
clap = "4.5"
ctor = "0.2"
criterion = "0.5"
crossterm = "0.27"
derive_more = "0.99"
directories = "5.0"
humantime = "2.1"
dyn-clone = "1.0"
enum-iterator = "2.0"
enumflags2 = "0.7"
expect-test = "1.3"
fallible-iterator = "0.3"
fix-hidden-lifetime-bug = "0.2"
fixed-hash = "0.8"
flate2 = "1.0"
fs4 = "0.8"
futures = { version = "0.3", default-features = false }
generic-array = "0.14"
heck = "0.5"
hex = "0.4"
hex-literal = "0.4"
hmac = "0.12"
iced = "0.12"
iced_aw = "0.9"
indoc = "2.0"
itertools = "0.13"
jsonrpsee = { version = "0.22", default-features = false }
lazy_static = "1.4"
libtest-mimic = "0.7"
log = "0.4"
loom = "0.7"
merkletree-mintlayer = "0.1"
mockall = "0.12"
num = "0.4"
num-derive = "0.4"
num-traits = "0.2"
once_cell = "1.13"
oneshot = "0.1"
parity-scale-codec = "3.1"
parking_lot = "0.12"
paste = "1.0"
probabilistic-collections = "0.7"
proc-macro2 = "1.0"
proptest = "1.0"
qrcodegen = "1.8"
quote = "1.0"
rand = "0.8"
rand_chacha = "0.3"
rayon = "1.10"
reedline = "0.32"
ref-cast = "1.0"
regex = "1.10"
replace_with = "0.1"
rfd = { version = "0.14", default-features = false }
ripemd = "0.1"
rlimit = "0.10"
rstest = "0.21"
rusqlite = "0.31"
schnorrkel = "0.11"
serde = "1.0"
serde_json = "1.0"
serde_test = "1.0"
serde_with = "3.6"
serial_test = "3.0"
sha-1 = "0.10"
sha2 = "0.10"
sha3 = "0.10"
shlex = "1.0"
siphasher = "1.0"
slave-pool = "0.2"
snowstorm = "0.4"
socket2 = "0.5"
sscanf = "0.4"
static_assertions = "1.1"
syn = "2.0"
tap = "1.0"
tempfile = "3.3"
testing_logger = "0.1"
thiserror = "1.0"
tracing = "0.1"
tracing-subscriber = { version = "0.3", features = [
  "registry",
  "env-filter",
  "json",
] }
tokio = { version = "1.27", default-features = false }
tokio-socks = "0.5"
tokio-stream = "0.1"
tokio-util = { version = "0.7", default-features = false }
toml = "0.8"
tower = "0.4"
tower-http-axum = { package = "tower-http", version = "0.5" }
trust-dns-client = "0.23"
trust-dns-server = "0.23"
variant_count = "1.1"
zeroize = "1.5"

# Config for 'cargo dist'
[workspace.metadata.dist]
# The preferred cargo-dist version to use in CI (Cargo.toml SemVer syntax)
cargo-dist-version = "0.8.0"
# CI backends to support
ci = ["github"]
# The installers to generate for each app
installers = ["shell", "powershell", "homebrew"]
# Target platforms to build apps for (Rust target-triple syntax)
targets = ["aarch64-apple-darwin", "x86_64-apple-darwin", "x86_64-unknown-linux-gnu", "x86_64-pc-windows-msvc"]
# Extra static files to include in each App (path relative to this Cargo.toml's dir)
include = ["Mintlayer_Node_GUI.dmg"]
additional-files = ["Mintlayer_Node_GUI.dmg"]
# Publish jobs to run in CI
pr-run-mode = "plan"
# A GitHub repo to push Homebrew formulas to
tap = "mintlayer/homebrew"
# Publish jobs to run in CI
publish-jobs = ["homebrew"]

[workspace.metadata.dist.dependencies.apt]
"libatk1.0-0" = "*"
"libatk1.0-dev" = "*"
"libgdk3.0-cil" = '*'
"libgdk3.0-cil-dev" = "*"

[profile.dev]
panic = "abort" # prevent panic catching (mostly for the tokio runtime)

[profile.release]
panic = "abort"        # prevent panic catching (mostly for the tokio runtime)
overflow-checks = true

# "Release" profile with debug info enabled.
[profile.release-with-debug-info]
inherits = "release"
debug = true

# "Release" profile with debug info and debug assertions enabled.
[profile.release-with-debug]
inherits = "release"
debug = true
debug-assertions = true

[profile.test]
debug-assertions = true
overflow-checks = true

[profile.test.package.script]
opt-level = 2

# The profile that 'cargo dist' will build with
[profile.dist]
inherits = "release"
lto = "off"
